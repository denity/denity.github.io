<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>grafana简单oauth认证（自建简易oauth 2.0实现grafana SSO整合）</title>
      <link href="/2019/grafana-oauth-simple/"/>
      <url>/2019/grafana-oauth-simple/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Grafana能够以较为丰富的方式进行单点登录集成。在  <a href="https://grafana.com/docs/installation/configuration/" target="_blank" rel="noopener">https://grafana.com/docs/installation/configuration/</a>  中有比较全面的描述。</p><ul><li><a href="https://grafana.com/docs/auth/overview/" target="_blank" rel="noopener">Authentication Overview</a> (anonymous access options, hide login and more)</li><li><a href="https://grafana.com/docs/auth/google/" target="_blank" rel="noopener">Google OAuth</a> (auth.google)</li><li><a href="https://grafana.com/docs/auth/github/" target="_blank" rel="noopener">GitHub OAuth</a> (auth.github)</li><li><a href="https://grafana.com/docs/auth/gitlab/" target="_blank" rel="noopener">Gitlab OAuth</a> (auth.gitlab)</li><li><a href="https://grafana.com/docs/auth/generic-oauth/" target="_blank" rel="noopener">Generic OAuth</a> (auth.generic_oauth, okta2, auth0, bitbucket, azure)</li><li><a href="https://grafana.com/docs/auth/overview/" target="_blank" rel="noopener">Basic Authentication</a> (auth.basic)</li><li><a href="https://grafana.com/docs/auth/ldap/" target="_blank" rel="noopener">LDAP Authentication</a> (auth.ldap)</li><li><a href="https://grafana.com/docs/auth/auth-proxy/" target="_blank" rel="noopener">Auth Proxy</a> (auth.proxy)</li></ul></blockquote><p>但是如果原有系统无法使用以上方式进行整合，又不想直接允许匿名登录，则可以基于OAuth 2.0的认证逻辑，开发一个简易的OAuth认证服务，实现Grafana的单点登录。</p><p>以下内容在 <a href="https://smallpath.me/post/grafana-with-sso" target="_blank" rel="noopener">https://smallpath.me/post/grafana-with-sso</a> 获得了很多帮助。</p><p>OAuth2 RFC6749 原理可查看  <a href="https://colobu.com/2017/04/28/oauth2-rfc6749/" target="_blank" rel="noopener">https://colobu.com/2017/04/28/oauth2-rfc6749/</a> </p><h3 id="OAuth-2-0认证基本逻辑"><a href="#OAuth-2-0认证基本逻辑" class="headerlink" title="OAuth 2.0认证基本逻辑"></a>OAuth 2.0认证基本逻辑</h3><h4 id="协议流程"><a href="#协议流程" class="headerlink" title="协议流程"></a>协议流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+--------+                               +---------------+</span><br><span class="line">|        |--(A)- Authorization Request -&gt;|   Resource    |</span><br><span class="line">|        |                               |     Owner     |</span><br><span class="line">|        |&lt;-(B)-- Authorization Grant ---|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(C)-- Authorization Grant --&gt;| Authorization |</span><br><span class="line">| Client |                               |     Server    |</span><br><span class="line">|        |&lt;-(D)----- Access Token -------|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(E)----- Access Token ------&gt;|    Resource   |</span><br><span class="line">|        |                               |     Server    |</span><br><span class="line">|        |&lt;-(F)--- Protected Resource ---|               |</span><br><span class="line">+--------+                               +---------------+</span><br></pre></td></tr></table></figure><p> 图中所示的抽象OAuth 2.0流程描述了四个角色之间的交互，包括以下步骤： </p><ul><li>（A）客户端向从资源所有者请求授权。授权请求可以直接向资源所有者发起（如图所示），或者更可取的是通过作为中介的授权服务器间接发起。</li><li>（B）客户端收到授权许可，这是一个代表资源所有者的授权的凭据，使用本规范中定义的四种许可类型之一或 者使用扩展许可类型表示。授权许可类型取决于客户端请求授权所使用的方式以及授权服务器支持的类型。</li><li>（C）客户端与授权服务器进行身份认证并出示授权许可请求访问令牌。</li><li>（D）授权服务器验证客户端身份并验证授权许可，若有效则颁发访问令牌。</li><li>（E）客户端从资源服务器请求受保护资源并出示访问令牌进行身份验证。</li><li>（F）资源服务器验证访问令牌，若有效则满足该请求。</li></ul><h3 id="简易OAuth服务开发"><a href="#简易OAuth服务开发" class="headerlink" title="简易OAuth服务开发"></a>简易OAuth服务开发</h3><h4 id="Grafana配置"><a href="#Grafana配置" class="headerlink" title="Grafana配置"></a>Grafana配置</h4><h5 id="1、配置综述"><a href="#1、配置综述" class="headerlink" title="1、配置综述"></a>1、配置综述</h5><p>Grafana可以很方便地与 Okta、Google、ldap、Github 、OneClick Login等进行集成。在单点登录整合前，也评估过与这些系统对接。后综合评估后，都存在各样问题。</p><ol><li>部分产品需要外部服务支持，如Google、Github等。受到外部网络环境影响较大。</li><li>可以私有化部署地产品，存在部署、学习配置、与现有账号/机构系统整合等成本。</li></ol><p>综合评估下来，还是通过Grafana地Generic OAuth方式，通过开发与现有系统整合，又符合Grafana OAuth2.0 要求的单点登录服务比较方便。</p><h5 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h5><p>Grafana单点登录配置，主要有3个参数，<strong>auth_url、token_url、api_url</strong>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[auth.generic_oauth]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">name</span> = 名称</span><br><span class="line"><span class="comment">;allow_sign_up = true</span></span><br><span class="line"><span class="attr">client_id</span> = grafana_info<span class="comment">;用于传递到auth_url标识系统来源</span></span><br><span class="line"><span class="attr">client_secret</span> = some_secret<span class="comment">;用于传递到token_url标识系统，可暂时忽略</span></span><br><span class="line"><span class="attr">scopes</span> = uname email<span class="comment">;搜索返回用户数据的来源</span></span><br><span class="line"><span class="comment">;email_attribute_name = email:primary</span></span><br><span class="line"><span class="comment">;email_attribute_path =</span></span><br><span class="line"><span class="attr">auth_url</span> = https://XXXXXXXX/oauth2_simple/auth.php<span class="comment">;认证第一步的授权页面</span></span><br><span class="line"><span class="attr">token_url</span> = https://XXXXXXXX/oauth2_simple/token.php<span class="comment">;认证第二步的获取token页面</span></span><br><span class="line"><span class="attr">api_url</span> = https://XXXXXXXX/oauth2_simple/user.php<span class="comment">;认证第三步的通过token获取用户信息页面</span></span><br></pre></td></tr></table></figure><h5 id="3、配置说明"><a href="#3、配置说明" class="headerlink" title="3、配置说明"></a>3、配置说明</h5><p>（参考<a href="https://smallpath.me/post/grafana-with-sso，并进行了调整）" target="_blank" rel="noopener">https://smallpath.me/post/grafana-with-sso，并进行了调整）</a></p><ul><li><strong>Grafana 参数 auth_url</strong></li></ul><p>auth_url 是 Generic-oauth 的 OAuth 2 流程的第一步，Grafana 会在前端跳转到 auth_url 里填写的地址，我们需要在这个地址里做的事情是：</p><ol><li><p>校验client_id（是否与[auth.generic_oauth]中配置一致），判断跳转过来的系统是否是Grafana。</p></li><li><p>auth_url 验证当前浏览器账户的登录状态，如果没有登录（session/cookie等），则引导用户进行登录。</p></li><li><p>由以登录的用户信息，生成 ${token} </p></li><li><p>根据Grafana 跳转过来的地址的 querystring 中会带有 redirect_uri 和 state 参数，构造跳回Grafana的地址。构造地址为： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri?state=$&#123;state&#125;&amp;code=$&#123;token&#125;</span><br></pre></td></tr></table></figure><p>注意，${state}参数一定是Grafana传递过来的参数，原封不动传递回去。</p></li></ol><ul><li><strong>Grafana 参数 token_url</strong></li></ul><p>Grafana的验证地址（其实就是第一步所拼装跳转回来的地址）执行两部操作。</p><ol><li>验证回调过来的${state}是否正确。</li><li>获取${code}参数，通过服务后台（既不通过浏览器前台，所以如果都是内部的话，这里可以配置为内网地址，确保系统的安全性），调用 <strong>token_url</strong> 地址，获取 access_token。</li></ol><p>Grafana向 <strong>token_url</strong> POST数据（后台调用）：code、grant_type、client_id、client_secret</p><p><strong>token_url</strong> 获得以上4个参数后，可以根据系统逻辑进行各种处理，返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"access_token"</span>: <span class="string">"$access_token"</span>, <span class="attr">"token_type"</span>: <span class="string">"SSO"</span>, <span class="attr">"refresh_token"</span>: <span class="string">"$code"</span>, <span class="attr">"expires_int"</span>: <span class="number">60000</span>&#125;</span><br></pre></td></tr></table></figure><p>Grafana获得 access_token</p><ul><li><strong>Grafana 参数 api_url</strong></li></ul><p>这是最后一步，Grafana根据获得的 access_token， 调用 <strong>api_url</strong>  api_url返回包含用户数据的json结构。</p><p>注意：这里Grafana将Authorization的信息，包含在Request的Header中，不是在Post/Get的参数。以php为例，获取参数信息代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$Authorization = $_SERVER[<span class="string">"HTTP_AUTHORIZATION"</span>]; <span class="comment">//$header['Authorization'];</span></span><br><span class="line"><span class="comment">//echo $Authorization;</span></span><br><span class="line"></span><br><span class="line">$auth_arr = explode(<span class="string">' '</span>,$Authorization);<span class="comment">//切分</span></span><br><span class="line">$token = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>( count($auth_arr) &gt;= <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//error_log("key :".$auth_arr[1]);</span></span><br><span class="line">$token = $auth_arr[<span class="number">1</span>];<span class="comment">//这个就是授权的access_token</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>api_url返回</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"Email"</span>: <span class="string">"$email"</span>, <span class="attr">"Login"</span>: <span class="string">"$uname"</span>,<span class="attr">"Name"</span>: <span class="string">"$uname"</span>&#125;</span><br></pre></td></tr></table></figure><p>Grafana会根据参数中的scopes 配置，来获取授权的用户名。</p><p>该用户名，必须提前在Grafana中已经注册。</p><p>由此，一个简易OAuth2.0的认证完成。这种方式不但适用于Grafana，也适用于其它使用OAuth2.0整合的第三方系统。</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS/JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用命令</title>
      <link href="/2019/common-script/"/>
      <url>/2019/common-script/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>-= 获取当前目录下，各文件夹的大小 =-</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1 ./</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard/Url</title>
      <link href="/2019/a-way-to-set-grafana-panel-links/"/>
      <url>/2019/a-way-to-set-grafana-panel-links/</url>
      
        <content type="html"><![CDATA[<h3 id="配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard"><a href="#配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard" class="headerlink" title="配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard"></a>配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard</h3><p>Grafana有3个地方可以配置跳转链接</p><ol><li>dashboard层次，在dashboard的settings可以配置Links。</li><li>每一个Panel的<strong>data links</strong>。</li><li>每一个Panel的<strong>panel links</strong>。</li></ol><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks1.png" alt="在dashboard的Settings-&gt;Links中配置链接"></p><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks2.png" alt="在Panel中配置data links"></p><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks3.png" alt="在Panel中配置panel links"></p><p>在这三个地方都能够实现点击链接跳转到另外的页面。</p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>在添加链接时，可以使用绝对地址，也可以通过传递变量参数，实现链接的动态跳转</p><p>主要参数如下</p><table><thead><tr><th>名称</th><th>举例</th><th>简要说明</th></tr></thead><tbody><tr><td>${配置的dashboard变量}</td><td>如$group,$host等</td><td>这些变量需要在dashboard的settings的变量里面设置</td></tr><tr><td>${__url_time_range}</td><td>时间范围</td><td>${<strong>url_time_range} ${</strong>from} ${__to}</td></tr><tr><td>${__series.name}</td><td>数据列的名称</td><td>只在<strong>data links</strong>中有</td></tr><tr><td>${__field.name}</td><td>数据列的名称</td><td>只在<strong>data links</strong>中有</td></tr><tr><td>${__value.numeric}</td><td>图表的数值</td><td>只在<strong>data links</strong>中有，可以是字符/数字/原值/计算值</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>注意：</strong>在实践中发现，如果dashboard的变量，允许使用<strong>ALL</strong>的时候，只有在<strong>panel links</strong>中配置的url能够准确抓取当前图表的变量值。否则，会将变量的所有值，都会被传送到跳转链接中，导致目标url在获取参数的时候不正确。</p><h3 id="跳转到Dashboard"><a href="#跳转到Dashboard" class="headerlink" title="跳转到Dashboard"></a>跳转到Dashboard</h3><p>跳转到Dashboard是，网上的说明一直说的不够透彻。最简单的方法如下：</p><p>1、进入需要跳转的Dashboard，复制浏览器前面一段<br><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks4.png" alt="复制dashboard链接地址"></p><p>2、这段地址前面一段，就是Dashboard的地址，将这段链接地址，复制到Links里面，配置即可。</p><p>3、加上适当的参数。</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS/JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置github正确的Repository name避免404错误</title>
      <link href="/2019/set-correct-name-to-fix-github-404/"/>
      <url>/2019/set-correct-name-to-fix-github-404/</url>
      
        <content type="html"><![CDATA[<p>现在一个很热门的博客方式，就是在github上建Github Pages。</p><p>在创建Github的仓库（Resposity），并且上传Hexo页面后，页面总是404。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/1571907461817.png" alt="1571907461817"></p><p>在网上很多教程中，都忽略了一点，就是正确设置github仓库的名字。</p><p><strong>如果要设置Github Pages，仓库的名字，必须是用户名。才能出现形如 <u>username.github.io</u> 的访问方式。</strong></p><p>也就是说，这里的仓库名称也不能随便取得。</p><hr><p>正确设置后，在Github的“Settings”里面，将直接显示出可访问的地址。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/1571907855052.png" alt="1571907855052"></p><p>配置完毕后，形成如下的设置，注意仓库前缀需要和用户名一致。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/githubname-settings.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS/JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
