<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从小有个开个咖啡店悠闲无聊看店外匆匆忙忙人来人往一边打代码一边喝咖啡吃蛋糕的梦想</title>
  
  <subtitle>Keep It Simple Stupid</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sqj.me/"/>
  <updated>2019-11-12T08:45:28.115Z</updated>
  <id>http://blog.sqj.me/</id>
  
  <author>
    <name>Jay Yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置Centos文件打开数</title>
    <link href="http://blog.sqj.me/2019/set-centos-open-files-count/"/>
    <id>http://blog.sqj.me/2019/set-centos-open-files-count/</id>
    <published>2019-11-12T06:26:23.000Z</published>
    <updated>2019-11-12T08:45:28.115Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Centos 默认的文件打开数比较低（默认1024)，在生产环境中很容易就引发文件打开数限制的问题。</p></blockquote><h3 id="查看文件打开数-open-files"><a href="#查看文件打开数-open-files" class="headerlink" title="查看文件打开数(open files)"></a>查看文件打开数(open files)</h3><h4 id="1、查看单个进程允许打开数"><a href="#1、查看单个进程允许打开数" class="headerlink" title="1、查看单个进程允许打开数"></a>1、查看单个进程允许打开数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br></pre></td></tr></table></figure><p><img src="http://q068kveb3.bkt.clouddn.com/image/openfiles1.png" alt=""></p><h4 id="2、查看系统总体能打开数（对所有进程）"><a href="#2、查看系统总体能打开数（对所有进程）" class="headerlink" title="2、查看系统总体能打开数（对所有进程）"></a>2、查看系统总体能打开数（对所有进程）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br><span class="line"></span><br><span class="line">789949<span class="comment">#返回值</span></span><br></pre></td></tr></table></figure><h3 id="修改文件打开数"><a href="#修改文件打开数" class="headerlink" title="修改文件打开数"></a>修改文件打开数</h3><h4 id="1、修改-etc-security-limits-conf-，允许一个进程打开数量"><a href="#1、修改-etc-security-limits-conf-，允许一个进程打开数量" class="headerlink" title="1、修改 /etc/security/limits.conf ，允许一个进程打开数量"></a>1、修改 /etc/security/limits.conf ，允许一个进程打开数量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在最后添加</span></span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><h4 id="2、修改所有进程允许总共文件打开数量"><a href="#2、修改所有进程允许总共文件打开数量" class="headerlink" title="2、修改所有进程允许总共文件打开数量"></a>2、修改所有进程允许总共文件打开数量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件中增加</span></span><br><span class="line">fs.file-max = 6553560</span><br><span class="line"></span><br><span class="line"><span class="comment">#使其生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="3、查看修改结果"><a href="#3、查看修改结果" class="headerlink" title="3、查看修改结果"></a>3、查看修改结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br></pre></td></tr></table></figure><p><img src="http://q068kveb3.bkt.clouddn.com/image/openfiles2.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br><span class="line"></span><br><span class="line">789949<span class="comment">#返回值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Centos 默认的文件打开数比较低（默认1024)，在生产环境中很容易就引发文件打开数限制的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;查看文件打开数-open-files&quot;&gt;&lt;a href=&quot;#查看文件打开数-open-file
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>如何配置nginx的日志格式</title>
    <link href="http://blog.sqj.me/2019/how-to-config-log-format-in-nginx/"/>
    <id>http://blog.sqj.me/2019/how-to-config-log-format-in-nginx/</id>
    <published>2019-11-11T02:57:35.000Z</published>
    <updated>2019-11-12T04:23:12.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx的Log详细配置，可以参考 <a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener"> http://nginx.org/en/docs/http/ngx_http_log_module.html </a> 里面有详细说明</p></blockquote><h3 id="配置日志格式"><a href="#配置日志格式" class="headerlink" title="配置日志格式"></a>配置日志格式</h3><p>格式为：log_format [格式名称] [格式描述] 。其中，格式描述支持变量，如 $http_host等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format format_name <span class="string">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class="line">                       <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                       <span class="string">'"$http_referer" "$http_user_agent" "$gzip_ratio"'</span>;</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format format_name  <span class="string">'$remote_addr - $remote_user [$time_local]'</span> <span class="string">'- "$http_host" - "$request" '</span></span><br><span class="line"><span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="string">'"$http_user_agent" $http_x_forwarded_for'</span>;</span><br></pre></td></tr></table></figure><h3 id="使用日志格式"><a href="#使用日志格式" class="headerlink" title="使用日志格式"></a>使用日志格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log /path-to-log/nginx-access.log format_name buffer=32k;</span><br></pre></td></tr></table></figure><p>buffer可以忽略。如果设置了buffer，则写入log的规则如下（应用nginx官方说明）</p><ul><li>if the next log line does not fit into the buffer;</li><li>if the buffered data is older than specified by the <code>flush</code> parameter (1.3.10, 1.2.7);</li><li>when a worker process is <a href="http://nginx.org/en/docs/control.html" target="_blank" rel="noopener">re-opening</a> log files or is shutting down.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx的Log详细配置，可以参考 &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_log_module.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; http://n
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://blog.sqj.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>php-fpm参数调优</title>
    <link href="http://blog.sqj.me/2019/php-fpm-optimize1/"/>
    <id>http://blog.sqj.me/2019/php-fpm-optimize1/</id>
    <published>2019-11-08T07:23:18.000Z</published>
    <updated>2019-11-12T08:21:57.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>php-fpm 参数调整优化记录</p></blockquote><h3 id="基本参数配置"><a href="#基本参数配置" class="headerlink" title="基本参数配置"></a>基本参数配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; pool name ('www' here)</span></span><br><span class="line"><span class="section">[www]</span></span><br><span class="line"><span class="attr">user</span> = www</span><br><span class="line"><span class="attr">group</span> = www</span><br><span class="line"></span><br><span class="line"><span class="comment">#限制绑定访问来源</span></span><br><span class="line"><span class="attr">listen</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span></span><br><span class="line"><span class="attr">listen.allowed_clients</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pm 设置为 dynamic 或者static</span></span><br><span class="line"><span class="attr">pm</span> = dynamic</span><br><span class="line"></span><br><span class="line"><span class="comment"># pm为static时，可以建设php-fpm进程调度的资源消耗。</span></span><br><span class="line"><span class="comment"># 32G内存，static 模式下，max_children可以配置为 800</span></span><br><span class="line"><span class="comment"># 以下配置为 4核CPU、16G内存的配置</span></span><br><span class="line"><span class="attr">pm.max_children</span> = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pm.start_servers</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pm.min_spare_servers</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pm.max_spare_servers</span> = <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pm.max_requests</span> = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;slowlog = log/$pool.log.slow</span></span><br></pre></td></tr></table></figure><p>关注点1：max_children的数值，最大php-fpm可允许的进程数量，由本机资源限制</p><p>关注点2：max_requests，当出现内存泄露的时候，该值可以设置小一点，便于进程及时回收。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;php-fpm 参数调整优化记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基本参数配置&quot;&gt;&lt;a href=&quot;#基本参数配置&quot; class=&quot;headerlink&quot; title=&quot;基本参数配置&quot;&gt;&lt;/a&gt;基本参数配置&lt;/h3&gt;&lt;figur
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
      <category term="php" scheme="http://blog.sqj.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Centos下查看内存占用情况的方法</title>
    <link href="http://blog.sqj.me/2019/methods-to-get-memory-usage/"/>
    <id>http://blog.sqj.me/2019/methods-to-get-memory-usage/</id>
    <published>2019-11-07T07:21:28.000Z</published>
    <updated>2019-11-12T08:46:56.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>获取进程cpu占用率的方法，以下代码以php-fpm为例</p></blockquote><h3 id="top-获取内存占用率"><a href="#top-获取内存占用率" class="headerlink" title="top 获取内存占用率"></a>top 获取内存占用率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line"><span class="comment"># 返回 内存占用排行</span></span><br><span class="line">M</span><br><span class="line"></span><br><span class="line">top - 16:25:00 up  2:02,  1 user,  load average: 0.14, 0.13, 0.07</span><br><span class="line">Tasks: 190 total,   1 running, 189 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.3 sy,  0.0 ni, 99.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 16257496 total, 15488716 free,   601532 used,   167248 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used. 15401912 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line"> 1255 root      20   0  358748  29496   7048 S   0.0  0.2   0:01.13 firewalld</span><br><span class="line"> 1582 root      20   0  574196  17412   6120 S   0.0  0.1   0:01.26 tuned</span><br><span class="line"> 1708 www       20   0  365248  16252   3620 S   0.0  0.1   0:14.68 php-fpm</span><br><span class="line"> 1717 www       20   0  365256  16252   3616 S   0.0  0.1   0:15.21 php-fpm</span><br><span class="line"> 1687 www       20   0  365252  16248   3616 S   0.0  0.1   0:15.06 php-fpm</span><br><span class="line"> 1700 www       20   0  365252  16220   3616 S   0.0  0.1   0:12.09 php-fpm</span><br></pre></td></tr></table></figure><h3 id="获取某进程的内存暂用率"><a href="#获取某进程的内存暂用率" class="headerlink" title="获取某进程的内存暂用率"></a>获取某进程的内存暂用率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ps -e -o <span class="string">'pid,comm,args,pcpu,rsz,vsz,stime,user,uid'</span>|grep www|sort -nrk5</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回</span></span><br><span class="line">47429 grep            grep --color=auto www        0.0   960 112716 16:26 root         0</span><br><span class="line"> 1720 php-fpm         php-fpm: pool www            0.1 13420 362180 14:22 www       1000</span><br><span class="line"> 1719 php-fpm         php-fpm: pool www            0.1 16132 364992 14:22 www       1000</span><br><span class="line">...</span><br><span class="line"> 1692 php-fpm         php-fpm: pool www            0.1 16088 364996 14:22 www       1000</span><br><span class="line"> 1691 php-fpm         php-fpm: pool www            0.2 15980 364996 14:22 www       1000</span><br><span class="line"> 1689 php-fpm         php-fpm: pool www            0.2 12932 361668 14:22 www       1000</span><br><span class="line"> 1688 php-fpm         php-fpm: pool www            0.1 12908 361668 14:22 www       1000</span><br><span class="line"> 1687 php-fpm         php-fpm: pool www            0.2 16248 365252 14:22 www       1000</span><br><span class="line"> 1620 nginx           nginx: worker process        0.0 10928  55404 14:22 www       1000</span><br><span class="line"> 1619 nginx           nginx: worker process        0.0 10932  55404 14:22 www       1000</span><br><span class="line"> 1618 nginx           nginx: worker process        0.0 10932  55404 14:22 www       1000</span><br><span class="line"> 1617 nginx           nginx: worker process        0.0 11120  55404 14:22 www       1000</span><br></pre></td></tr></table></figure><h3 id="进程平均内存占用率"><a href="#进程平均内存占用率" class="headerlink" title="进程平均内存占用率"></a>进程平均内存占用率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps --no-headers -o <span class="string">"rss,cmd"</span> -C php-fpm | awk <span class="string">'&#123; sum+=$1 &#125; END &#123; printf ("%d%s\n", sum/NR/1024,"M") &#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回</span></span><br><span class="line">15M</span><br></pre></td></tr></table></figure><h3 id="总体内存使用情况"><a href="#总体内存使用情况" class="headerlink" title="总体内存使用情况"></a>总体内存使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        599M         14G        9.2M        164M         14G</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;获取进程cpu占用率的方法，以下代码以php-fpm为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;top-获取内存占用率&quot;&gt;&lt;a href=&quot;#top-获取内存占用率&quot; class=&quot;headerlink&quot; title=&quot;top 获取内
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>linux centos 释放cache的方法</title>
    <link href="http://blog.sqj.me/2019/linux-centos-free-cache/"/>
    <id>http://blog.sqj.me/2019/linux-centos-free-cache/</id>
    <published>2019-11-06T03:34:37.000Z</published>
    <updated>2019-11-06T04:52:10.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生产环境中，Centos内存free很小，cache很大，可进行调整"><a href="#生产环境中，Centos内存free很小，cache很大，可进行调整" class="headerlink" title="生产环境中，Centos内存free很小，cache很大，可进行调整"></a>生产环境中，Centos内存free很小，cache很大，可进行调整</h3><p>1、查看内存情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><p><img src="http://q068kveb3.bkt.clouddn.com/image/free-m.png" alt=""></p><p>2、查看系统内存管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/drop_caches</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>3、配置自动清除内存cache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里可以选择1、2、3种模式</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches <span class="comment">#表示清除pagecache。</span></span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches <span class="comment">#表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。</span></span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches <span class="comment">#表示清除pagecache和slab分配器中的缓存对象。</span></span><br></pre></td></tr></table></figure><p>4、查看配置后的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><p>5、注意，配置完内存处理方式后，可能无法恢复成0的状态，既由系统自动进行内存管理和清除。</p><p>此时，可以重启服务器，重启后系统自动配置为状态0。</p><p>进一步了解Cache，可以查阅  <a href="https://www.v2ex.com/t/278921" target="_blank" rel="noopener">https://www.v2ex.com/t/278921</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生产环境中，Centos内存free很小，cache很大，可进行调整&quot;&gt;&lt;a href=&quot;#生产环境中，Centos内存free很小，cache很大，可进行调整&quot; class=&quot;headerlink&quot; title=&quot;生产环境中，Centos内存free很小，cac
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>如何在Nginx中屏蔽特定的地址或文件夹</title>
    <link href="http://blog.sqj.me/2019/how-to-ban-particular-floder-in-nginx/"/>
    <id>http://blog.sqj.me/2019/how-to-ban-particular-floder-in-nginx/</id>
    <published>2019-11-06T00:30:00.000Z</published>
    <updated>2019-11-12T04:31:20.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx是一个高性能Web/Proxy服务器。本文将配置Nginx，屏蔽对于特定Url或文件夹的访问。</p></blockquote><h3 id="屏蔽特定文件夹的访问"><a href="#屏蔽特定文件夹的访问" class="headerlink" title="屏蔽特定文件夹的访问"></a>屏蔽特定文件夹的访问</h3><p>实际网页中，有些地址是不允许外部进行访问的，可通过配置location节，进行特定地址屏蔽。</p><h4 id="1、新增一个限制访问文件配置对应的屏蔽信息，方便后续引入每一个站点的配置文件中"><a href="#1、新增一个限制访问文件配置对应的屏蔽信息，方便后续引入每一个站点的配置文件中" class="headerlink" title="1、新增一个限制访问文件配置对应的屏蔽信息，方便后续引入每一个站点的配置文件中"></a>1、新增一个限制访问文件配置对应的屏蔽信息，方便后续引入每一个站点的配置文件中</h4><h4 id="2、配置屏蔽信息"><a href="#2、配置屏蔽信息" class="headerlink" title="2、配置屏蔽信息"></a>2、配置屏蔽信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#屏蔽特定目录下的文件</span></span><br><span class="line">location ~* /(check|login|logincheck)\.(php|aspx|asp|html|jsp) </span><br><span class="line">&#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#屏蔽特定目录</span></span><br><span class="line">location ~* /(config|cnkadmin|eWebEditor|admin|_notes)/ </span><br><span class="line">&#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、将该文件在对应的站点文件中引入"><a href="#3、将该文件在对应的站点文件中引入" class="headerlink" title="3、将该文件在对应的站点文件中引入"></a>3、将该文件在对应的站点文件中引入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include _common_config.conf;</span><br></pre></td></tr></table></figure><p>4、Postman测试</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/postman-test-after-config2.png" alt=""></p><hr><p>在Nginx中，屏蔽特定特定IP/UA的访问，请看 <a href="/2019/how-to-ban-ip-or-ua-in-nginx">配置nginx屏蔽特定IP/UA的访问</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx是一个高性能Web/Proxy服务器。本文将配置Nginx，屏蔽对于特定Url或文件夹的访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;屏蔽特定文件夹的访问&quot;&gt;&lt;a href=&quot;#屏蔽特定文件夹的访问&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://blog.sqj.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix单点登录开发sso</title>
    <link href="http://blog.sqj.me/2019/zabbix-sso/"/>
    <id>http://blog.sqj.me/2019/zabbix-sso/</id>
    <published>2019-11-05T04:31:26.000Z</published>
    <updated>2019-11-05T09:15:59.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Zabbix是一个老牌的系统监控软件。是一个高度集成的网络监控解决方案，可以提供企业级的开源分布式监控解决方案。</p><p>Zabbix是一个基于Web界面的，提供分布式系统监控以及网络监视功能的企业级的开源解决方案。能灵活监视各种网络参数，保证服务器系统的安全运营，并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。</p><p>Zabbix可以分4部分：Zabbix server、Zabbix agent、Zabbix proxy（可选）、Zabbix web。</p><p>Zabbix 主要监控手段包括：Zabbix agent、snmp、ipmi、fping、http监测等方式，基本涵盖了主要的监控手段。</p><hr><p><strong>本文主要描述如何定制Zabbix的单点登录，经过4.2/4.4版测试。</strong></p></blockquote><h3 id="Zabbix登录方式"><a href="#Zabbix登录方式" class="headerlink" title="Zabbix登录方式"></a>Zabbix登录方式</h3><p>Zabbix主要有3中登录方式</p><ol><li>普通账号/密码认证，最常用的方式。</li><li>http认证，通过apache/nginx提供用户进行认证，适用于简单的场景。</li><li>LDAP登录，适用于组织内部运行有AD的环境。</li></ol><p>Zabbix没有一种直接对接SSO系统的方式。而LDAP方式也不便于进行账号的控制（进入Zabbix的用户一般都是少数几个人），故需要对Zabbix进行定制化改造，实现与现有系统的整合集成。</p><h3 id="Zabbix单点登录SSO定制思路"><a href="#Zabbix单点登录SSO定制思路" class="headerlink" title="Zabbix单点登录SSO定制思路"></a>Zabbix单点登录SSO定制思路</h3><p>在4.x版本下，首页代码index.php登录的入口。可以重写一个sso的登录入口，作为sso系统传递token过来的着陆页面，进行相关的登录逻辑处理。</p><p><strong>用户鉴权：</strong>Zabbix通过CWebUser（/include/classes/user/CWebUser.php）封装了对用户鉴权的操作。</p><p><strong>接口封装：</strong>CWebUser调用用户api CUser（/include/classes/api/services/CUser.php)，对用户进行鉴权。</p><p><strong>SSO定制思路：</strong></p><ol><li>仿照index.php，编制 fromportalsso.php  (单点登录着陆页面)，调用CWebUser中的登录函数。</li><li>改写CWebUser，增加单点登录的函数。</li><li>改写CUser，实现单点登录。</li></ol><h3 id="具体代码修改"><a href="#具体代码修改" class="headerlink" title="具体代码修改"></a>具体代码修改</h3><p>1、登录着陆页面fromportalsso.php关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CWebUser::logout();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------- 通过 token 获取 uname -------------------------*/</span></span><br><span class="line"><span class="comment">//SSO 传递token，通过token获取用户名 $uname 过程省略</span></span><br><span class="line"><span class="comment">//这个环节，是控制账号安全的关键环节。</span></span><br><span class="line"><span class="comment">/*--------------- 通过 token 获取 uname 结束-------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// login via portal sso</span></span><br><span class="line"><span class="keyword">if</span> ( CWebUser::login_from_portalsso($uname)) &#123;</span><br><span class="line">$redirect = $rdi!=<span class="string">""</span> ? $rdi : ZBX_DEFAULT_URL;</span><br><span class="line">redirect($redirect);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改CWebUser.php，增加一个函数 login_from_portalsso($login)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">login_from_portalsso</span><span class="params">($login)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">self</span>::setDefault();</span><br><span class="line"><span class="keyword">self</span>::$data = API::User()-&gt;login([</span><br><span class="line"><span class="string">'user'</span> =&gt; $login,</span><br><span class="line"><span class="string">'password'</span> =&gt; <span class="string">'NotAPassWord'</span>,<span class="comment">//这个随便写</span></span><br><span class="line"><span class="string">'userData'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line"><span class="string">'fromsso'</span> =&gt; <span class="number">1</span><span class="comment">//增加单点登录的标识</span></span><br><span class="line">],<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//其余内容和 login($login, $password) 函数一样。</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接调用默认的CUser::login函数。 实践中，如果调用了其它的函数，可能会发生不成功的现象，应该是接口检验的时候，根据规则，进行了过滤导致调用失败。所以最简单直接的方法，就是修改默认的login函数。</p><p>3、修改 CUser.php 的login函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $user</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> string|array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(array $user)</span> </span>&#123;</span><br><span class="line">$api_input_rules = [<span class="string">'type'</span> =&gt; API_OBJECT, <span class="string">'fields'</span> =&gt; [</span><br><span class="line"><span class="string">'user'</span> =&gt; ...,</span><br><span class="line"><span class="string">'password'</span> =&gt; ...,</span><br><span class="line"><span class="string">'userData'</span> =&gt;[<span class="string">'type'</span> =&gt; API_FLAG],</span><br><span class="line"><span class="string">'fromsso'</span> =&gt;[<span class="string">'type'</span> =&gt; API_FLAG]<span class="comment">//检验是否来自sso系统</span></span><br><span class="line">]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果来自sso系统，则强制密码和账号密码一致（既跳过后面的密码验证环节）</span></span><br><span class="line"><span class="keyword">if</span>( intval($user[<span class="string">'fromsso'</span>]) == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">$db_user[<span class="string">'passwd'</span>] = md5($user[<span class="string">'password'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其余代码不变...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Zabbix是一个老牌的系统监控软件。是一个高度集成的网络监控解决方案，可以提供企业级的开源分布式监控解决方案。&lt;/p&gt;
&lt;p&gt;Zabbix是一个基于Web界面的，提供分布式系统监控以及网络监视功能的企业级的开源解决方案。能灵活监视各种网络参数，保
      
    
    </summary>
    
    
      <category term="HTML/CSS/JS" scheme="http://blog.sqj.me/categories/HTML-CSS-JS/"/>
    
    
      <category term="SSO" scheme="http://blog.sqj.me/tags/SSO/"/>
    
      <category term="Zabbix" scheme="http://blog.sqj.me/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>配置nginx屏蔽特定IP/UA的访问</title>
    <link href="http://blog.sqj.me/2019/how-to-ban-ip-or-ua-in-nginx/"/>
    <id>http://blog.sqj.me/2019/how-to-ban-ip-or-ua-in-nginx/</id>
    <published>2019-11-04T02:57:03.000Z</published>
    <updated>2019-11-12T08:21:09.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx是一个高性能Web/Proxy服务器。本文将配置Nginx，来允许特定IP来源访问，屏蔽特定UA（User-Agent）访问。</p></blockquote><h3 id="允许-屏蔽IP的访问"><a href="#允许-屏蔽IP的访问" class="headerlink" title="允许/屏蔽IP的访问"></a>允许/屏蔽IP的访问</h3><p>在接入云WAF后，通常要限制访问的IP来源（通常称为限源）。在Nginx中，能够很容易地配置。</p><h4 id="1、新增一个限源文件配置IP信息，方便后续引入每一个站点的配置文件中"><a href="#1、新增一个限源文件配置IP信息，方便后续引入每一个站点的配置文件中" class="headerlink" title="1、新增一个限源文件配置IP信息，方便后续引入每一个站点的配置文件中"></a>1、新增一个限源文件配置IP信息，方便后续引入每一个站点的配置文件中</h4><h4 id="2、配置IP白名单"><a href="#2、配置IP白名单" class="headerlink" title="2、配置IP白名单"></a>2、配置IP白名单</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  白名单IP</span></span><br><span class="line">allow 113.456.238.0/24;</span><br><span class="line">allow 106.142.25.0/24;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="3、配置其余IP禁止访问"><a href="#3、配置其余IP禁止访问" class="headerlink" title="3、配置其余IP禁止访问"></a>3、配置其余IP禁止访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deny all;</span><br></pre></td></tr></table></figure><hr><h3 id="屏蔽特定UA访问来源"><a href="#屏蔽特定UA访问来源" class="headerlink" title="屏蔽特定UA访问来源"></a>屏蔽特定UA访问来源</h3><p>通过Nginx监测 $http_user_agent ，判断是否包含特定字符来进行过滤。比如屏蔽Awesomium，可用如下代码。~*符号，标识正则匹配时，忽略大小写。</p><p>当匹配到对应UA的时候，返回404错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">"Awesomium"</span>)&#123;</span><br><span class="line">     <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="所有代码结构"><a href="#所有代码结构" class="headerlink" title="所有代码结构"></a>所有代码结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  屏蔽 UA</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">"Awesomium"</span>)&#123;</span><br><span class="line">     <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  白名单IP</span></span><br><span class="line">allow 113.456.238.0/24;</span><br><span class="line">allow 106.142.25.0/24;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#  白名单IP结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  屏蔽其它IP访问来源</span></span><br><span class="line">deny all;</span><br></pre></td></tr></table></figure><h3 id="使用Postman进行配置测试"><a href="#使用Postman进行配置测试" class="headerlink" title="使用Postman进行配置测试"></a>使用Postman进行配置测试</h3><h4 id="1、正常情况下，返回正确的信息"><a href="#1、正常情况下，返回正确的信息" class="headerlink" title="1、正常情况下，返回正确的信息"></a>1、正常情况下，返回正确的信息</h4><p><img src="http://q068kveb3.bkt.clouddn.com/image/postman-test-before-config.png" alt=""></p><h4 id="2、配置了屏蔽代码后，直接返回错误信息。"><a href="#2、配置了屏蔽代码后，直接返回错误信息。" class="headerlink" title="2、配置了屏蔽代码后，直接返回错误信息。"></a>2、配置了屏蔽代码后，直接返回错误信息。</h4><p><img src="http://q068kveb3.bkt.clouddn.com/image/postman-test-after-config.png" alt=""></p><hr><p>屏蔽访问特定的url地址，请看 <a href="/2019/how-to-ban-particular-floder-in-nginx">如何在Nginx中屏蔽特定的地址或文件夹</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx是一个高性能Web/Proxy服务器。本文将配置Nginx，来允许特定IP来源访问，屏蔽特定UA（User-Agent）访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;允许-屏蔽IP的访问&quot;&gt;&lt;a href=&quot;#允许-屏蔽IP
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://blog.sqj.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>linux centos 调整配置 swap 的方法</title>
    <link href="http://blog.sqj.me/2019/linux-centos-swap-modify/"/>
    <id>http://blog.sqj.me/2019/linux-centos-swap-modify/</id>
    <published>2019-11-03T02:34:37.000Z</published>
    <updated>2019-11-12T08:21:21.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生产环境中，发现Centos的swap分区不足，调整swap。"><a href="#生产环境中，发现Centos的swap分区不足，调整swap。" class="headerlink" title="生产环境中，发现Centos的swap分区不足，调整swap。"></a>生产环境中，发现Centos的swap分区不足，调整swap。</h3><p>1、查看内存情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><p><img src="http://q068kveb3.bkt.clouddn.com/image/free-m.png" alt=""></p><p>2、增加swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/var/swap bs=1024 count=20480000</span><br><span class="line"></span><br><span class="line">mkswap /var/swap</span><br><span class="line"></span><br><span class="line">mkswap -f /var/swap</span><br><span class="line"></span><br><span class="line">swapon /var/swap</span><br></pre></td></tr></table></figure><p>3、增加开机配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/swap               swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure><p>4、查看配置后的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><p><img src="http://q068kveb3.bkt.clouddn.com/image/free-m2.png" alt=""></p><p>5、 如果不再需要swap，可以清理该分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff /var/swap</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生产环境中，发现Centos的swap分区不足，调整swap。&quot;&gt;&lt;a href=&quot;#生产环境中，发现Centos的swap分区不足，调整swap。&quot; class=&quot;headerlink&quot; title=&quot;生产环境中，发现Centos的swap分区不足，调整swap
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Grafana简单OAuth认证（自建简易OAuth 2.0实现Grafana SSO整合）</title>
    <link href="http://blog.sqj.me/2019/grafana-oauth-simple/"/>
    <id>http://blog.sqj.me/2019/grafana-oauth-simple/</id>
    <published>2019-10-31T04:05:15.000Z</published>
    <updated>2019-11-01T07:03:32.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Grafana能够以较为丰富的方式进行单点登录集成。在  <a href="https://Grafana.com/docs/installation/configuration/" target="_blank" rel="noopener">https://Grafana.com/docs/installation/configuration/</a>  中有比较全面的描述。</p><ul><li><a href="https://Grafana.com/docs/auth/overview/" target="_blank" rel="noopener">Authentication Overview</a> (anonymous access options, hide login and more)</li><li><a href="https://Grafana.com/docs/auth/google/" target="_blank" rel="noopener">Google OAuth</a> (auth.google)</li><li><a href="https://Grafana.com/docs/auth/github/" target="_blank" rel="noopener">GitHub OAuth</a> (auth.github)</li><li><a href="https://Grafana.com/docs/auth/gitlab/" target="_blank" rel="noopener">Gitlab OAuth</a> (auth.gitlab)</li><li><a href="https://Grafana.com/docs/auth/generic-OAuth/" target="_blank" rel="noopener">Generic OAuth</a> (auth.generic_OAuth, okta2, auth0, bitbucket, azure)</li><li><a href="https://Grafana.com/docs/auth/overview/" target="_blank" rel="noopener">Basic Authentication</a> (auth.basic)</li><li><a href="https://Grafana.com/docs/auth/ldap/" target="_blank" rel="noopener">LDAP Authentication</a> (auth.ldap)</li><li><a href="https://Grafana.com/docs/auth/auth-proxy/" target="_blank" rel="noopener">Auth Proxy</a> (auth.proxy)</li></ul></blockquote><p>但是如果原有系统无法使用以上方式进行整合，又不想直接允许匿名登录，则可以基于OAuth 2.0的认证逻辑，开发一个简易的OAuth认证服务，实现Grafana的单点登录。</p><p>以下内容在 <a href="https://smallpath.me/post/Grafana-with-sso" target="_blank" rel="noopener">https://smallpath.me/post/Grafana-with-sso</a> 获得了很多帮助。</p><p>OAuth2 RFC6749 原理可查看  <a href="https://colobu.com/2017/04/28/OAuth2-rfc6749/" target="_blank" rel="noopener">https://colobu.com/2017/04/28/OAuth2-rfc6749/</a> </p><h3 id="OAuth-2-0认证基本逻辑"><a href="#OAuth-2-0认证基本逻辑" class="headerlink" title="OAuth 2.0认证基本逻辑"></a>OAuth 2.0认证基本逻辑</h3><h4 id="协议流程"><a href="#协议流程" class="headerlink" title="协议流程"></a>协议流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+--------+                               +---------------+</span><br><span class="line">|        |--(A)- Authorization Request -&gt;|   Resource    |</span><br><span class="line">|        |                               |     Owner     |</span><br><span class="line">|        |&lt;-(B)-- Authorization Grant ---|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(C)-- Authorization Grant --&gt;| Authorization |</span><br><span class="line">| Client |                               |     Server    |</span><br><span class="line">|        |&lt;-(D)----- Access Token -------|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(E)----- Access Token ------&gt;|    Resource   |</span><br><span class="line">|        |                               |     Server    |</span><br><span class="line">|        |&lt;-(F)--- Protected Resource ---|               |</span><br><span class="line">+--------+                               +---------------+</span><br></pre></td></tr></table></figure><p> 图中所示的抽象OAuth 2.0流程描述了四个角色之间的交互，包括以下步骤： </p><ul><li>（A）客户端向从资源所有者请求授权。授权请求可以直接向资源所有者发起（如图所示），或者更可取的是通过作为中介的授权服务器间接发起。</li><li>（B）客户端收到授权许可，这是一个代表资源所有者的授权的凭据，使用本规范中定义的四种许可类型之一或 者使用扩展许可类型表示。授权许可类型取决于客户端请求授权所使用的方式以及授权服务器支持的类型。</li><li>（C）客户端与授权服务器进行身份认证并出示授权许可请求访问令牌。</li><li>（D）授权服务器验证客户端身份并验证授权许可，若有效则颁发访问令牌。</li><li>（E）客户端从资源服务器请求受保护资源并出示访问令牌进行身份验证。</li><li>（F）资源服务器验证访问令牌，若有效则满足该请求。</li></ul><h3 id="简易OAuth服务开发"><a href="#简易OAuth服务开发" class="headerlink" title="简易OAuth服务开发"></a>简易OAuth服务开发</h3><h4 id="Grafana配置"><a href="#Grafana配置" class="headerlink" title="Grafana配置"></a>Grafana配置</h4><h5 id="1、配置综述"><a href="#1、配置综述" class="headerlink" title="1、配置综述"></a>1、配置综述</h5><p>Grafana可以很方便地与 Okta、Google、ldap、Github 、OneClick Login等进行集成。在单点登录整合前，也评估过与这些系统对接。后综合评估后，都存在各样问题。</p><ol><li>部分产品需要外部服务支持，如Google、Github等。受到外部网络环境影响较大。</li><li>可以私有化部署地产品，存在部署、学习配置、与现有账号/机构系统整合等成本。</li></ol><p>综合评估下来，还是通过Grafana地Generic OAuth方式，通过开发与现有系统整合，又符合Grafana OAuth2.0 要求的单点登录服务比较方便。</p><h5 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h5><p>Grafana单点登录配置，主要有3个参数，<strong>auth_url、token_url、api_url</strong>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[auth.generic_OAuth]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">name</span> = 名称</span><br><span class="line"><span class="comment">;allow_sign_up = true</span></span><br><span class="line"><span class="attr">client_id</span> = Grafana_info<span class="comment">;用于传递到auth_url标识系统来源</span></span><br><span class="line"><span class="attr">client_secret</span> = some_secret<span class="comment">;用于传递到token_url标识系统，可暂时忽略</span></span><br><span class="line"><span class="attr">scopes</span> = uname email<span class="comment">;搜索返回用户数据的来源</span></span><br><span class="line"><span class="comment">;email_attribute_name = email:primary</span></span><br><span class="line"><span class="comment">;email_attribute_path =</span></span><br><span class="line"><span class="attr">auth_url</span> = https://XXXXXXXX/OAuth2_simple/auth.php<span class="comment">;认证第一步的授权页面</span></span><br><span class="line"><span class="attr">token_url</span> = https://XXXXXXXX/OAuth2_simple/token.php<span class="comment">;认证第二步的获取token页面</span></span><br><span class="line"><span class="attr">api_url</span> = https://XXXXXXXX/OAuth2_simple/user.php<span class="comment">;认证第三步的通过token获取用户信息页面</span></span><br></pre></td></tr></table></figure><h5 id="3、配置说明"><a href="#3、配置说明" class="headerlink" title="3、配置说明"></a>3、配置说明</h5><p>（参考<a href="https://smallpath.me/post/Grafana-with-sso" target="_blank" rel="noopener">https://smallpath.me/post/Grafana-with-sso</a> ，并进行了调整）</p><p><strong>3.1 Grafana 参数 auth_url</strong></p><p>auth_url 是 Generic-OAuth 的 OAuth 2 流程的第一步，Grafana 会在前端跳转到 auth_url 里填写的地址，我们需要在这个地址里做的事情是：</p><ol><li><p>校验client_id（是否与[auth.generic_OAuth]中配置一致），判断跳转过来的系统是否是Grafana。</p></li><li><p>auth_url 验证当前浏览器账户的登录状态，如果没有登录（session/cookie等），则引导用户进行登录。</p></li><li><p>由以登录的用户信息，生成 ${token} </p></li><li><p>根据Grafana 跳转过来的地址的 querystring 中会带有 redirect_uri 和 state 参数，构造跳回Grafana的地址。构造地址为： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri?state=$&#123;state&#125;&amp;code=$&#123;token&#125;</span><br></pre></td></tr></table></figure><p>注意，${state}参数一定是Grafana传递过来的参数，原封不动传递回去。</p></li></ol><p><strong>3.2 Grafana 参数 token_url</strong></p><p>Grafana的验证地址（其实就是第一步所拼装跳转回来的地址）执行两部操作。</p><ol><li>验证回调过来的${state}是否正确。</li><li>获取${code}参数，通过服务后台（既不通过浏览器前台，所以如果都是内部的话，这里可以配置为内网地址，确保系统的安全性），调用 <strong>token_url</strong> 地址，获取 access_token。</li></ol><p>Grafana向 <strong>token_url</strong> POST数据（后台调用）：code、grant_type、client_id、client_secret</p><p><strong>token_url</strong> 获得以上4个参数后，可以根据系统逻辑进行各种处理，返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"access_token"</span>: <span class="string">"$access_token"</span>, <span class="attr">"token_type"</span>: <span class="string">"SSO"</span>, <span class="attr">"refresh_token"</span>: <span class="string">"$code"</span>, <span class="attr">"expires_int"</span>: <span class="number">60000</span>&#125;</span><br></pre></td></tr></table></figure><p>Grafana获得 access_token</p><p><strong>3.3 Grafana 参数 api_url</strong></p><p>这是最后一步，Grafana根据获得的 access_token， 调用 <strong>api_url</strong>  api_url返回包含用户数据的json结构。</p><p>注意：这里Grafana将Authorization的信息，包含在Request的Header中，不是在Post/Get的参数。以php为例，获取参数信息代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$Authorization = $_SERVER[<span class="string">"HTTP_AUTHORIZATION"</span>]; <span class="comment">//$header['Authorization'];</span></span><br><span class="line"><span class="comment">//echo $Authorization;</span></span><br><span class="line"></span><br><span class="line">$auth_arr = explode(<span class="string">' '</span>,$Authorization);<span class="comment">//切分</span></span><br><span class="line">$token = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>( count($auth_arr) &gt;= <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//error_log("key :".$auth_arr[1]);</span></span><br><span class="line">$token = $auth_arr[<span class="number">1</span>];<span class="comment">//这个就是授权的access_token</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>api_url返回</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"Email"</span>: <span class="string">"$email"</span>, <span class="attr">"Login"</span>: <span class="string">"$uname"</span>,<span class="attr">"Name"</span>: <span class="string">"$uname"</span>&#125;</span><br></pre></td></tr></table></figure><p>Grafana会根据参数中的scopes 配置，来获取授权的用户名。</p><p>该用户名，必须提前在Grafana中已经注册。</p><p>至此，一个简易OAuth2.0的认证完成。这种方式不但适用于Grafana，也适用于其它使用OAuth 2.0整合的第三方系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Grafana能够以较为丰富的方式进行单点登录集成。在  &lt;a href=&quot;https://Grafana.com/docs/installation/configuration/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
      <category term="HTML/CSS/JS" scheme="http://blog.sqj.me/categories/HTML-CSS-JS/"/>
    
    
      <category term="Grafana" scheme="http://blog.sqj.me/tags/Grafana/"/>
    
      <category term="OAuth" scheme="http://blog.sqj.me/tags/OAuth/"/>
    
      <category term="SSO" scheme="http://blog.sqj.me/tags/SSO/"/>
    
  </entry>
  
  <entry>
    <title>常用命令</title>
    <link href="http://blog.sqj.me/2019/common-script/"/>
    <id>http://blog.sqj.me/2019/common-script/</id>
    <published>2019-10-30T01:55:54.000Z</published>
    <updated>2019-11-12T08:48:21.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>-= 获取当前目录下，各文件夹的大小 =-</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1 ./</span><br></pre></td></tr></table></figure><p>-= Centos下查看内存占用情况的方法 =-</p><p><a href="/2019/methods-to-get-memory-usage/">Centos下查看内存占用的方法top、free、ps</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h3&gt;&lt;p&gt;-= 获取当前目录下，各文件夹的大小 =-&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.sqj.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Centos" scheme="http://blog.sqj.me/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard/Url</title>
    <link href="http://blog.sqj.me/2019/a-way-to-set-grafana-panel-links/"/>
    <id>http://blog.sqj.me/2019/a-way-to-set-grafana-panel-links/</id>
    <published>2019-10-28T15:03:28.000Z</published>
    <updated>2019-10-30T05:35:23.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard"><a href="#配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard" class="headerlink" title="配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard"></a>配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard</h3><p>Grafana有3个地方可以配置跳转链接</p><ol><li>dashboard层次，在dashboard的settings可以配置Links。</li><li>每一个Panel的<strong>data links</strong>。</li><li>每一个Panel的<strong>panel links</strong>。</li></ol><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks1.png" alt="在dashboard的Settings-&gt;Links中配置链接"></p><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks2.png" alt="在Panel中配置data links"></p><p><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks3.png" alt="在Panel中配置panel links"></p><p>在这三个地方都能够实现点击链接跳转到另外的页面。</p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>在添加链接时，可以使用绝对地址，也可以通过传递变量参数，实现链接的动态跳转</p><p>主要参数如下</p><table><thead><tr><th>名称</th><th>举例</th><th>简要说明</th></tr></thead><tbody><tr><td>${配置的dashboard变量}</td><td>如$group,$host等</td><td>这些变量需要在dashboard的settings的变量里面设置</td></tr><tr><td>${__url_time_range}</td><td>时间范围</td><td>${<strong>url_time_range} ${</strong>from} ${__to}</td></tr><tr><td>${__series.name}</td><td>数据列的名称</td><td>只在<strong>data links</strong>中有</td></tr><tr><td>${__field.name}</td><td>数据列的名称</td><td>只在<strong>data links</strong>中有</td></tr><tr><td>${__value.numeric}</td><td>图表的数值</td><td>只在<strong>data links</strong>中有，可以是字符/数字/原值/计算值</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>注意：</strong>在实践中发现，如果dashboard的变量，允许使用<strong>ALL</strong>的时候，只有在<strong>panel links</strong>中配置的url能够准确抓取当前图表的变量值。否则，会将变量的所有值，都会被传送到跳转链接中，导致目标url在获取参数的时候不正确。</p><h3 id="跳转到Dashboard"><a href="#跳转到Dashboard" class="headerlink" title="跳转到Dashboard"></a>跳转到Dashboard</h3><p>跳转到Dashboard是，网上的说明一直说的不够透彻。最简单的方法如下：</p><p>1、进入需要跳转的Dashboard，复制浏览器前面一段<br><img src="http://q068kveb3.bkt.clouddn.com/image/awaytosetlinks4.png" alt="复制dashboard链接地址"></p><p>2、这段地址前面一段，就是Dashboard的地址，将这段链接地址，复制到Links里面，配置即可。</p><p>3、加上适当的参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard&quot;&gt;&lt;a href=&quot;#配置Grafana的Panel地址，实现点击图表后跳转到另一个dashboard&quot; class=&quot;headerlink&quot; title=&quot;配置Grafana的Pa
      
    
    </summary>
    
    
      <category term="HTML/CSS/JS" scheme="http://blog.sqj.me/categories/HTML-CSS-JS/"/>
    
    
      <category term="Grafana" scheme="http://blog.sqj.me/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>设置github正确的Repository name避免404错误</title>
    <link href="http://blog.sqj.me/2019/set-correct-name-to-fix-github-404/"/>
    <id>http://blog.sqj.me/2019/set-correct-name-to-fix-github-404/</id>
    <published>2019-10-24T08:50:00.000Z</published>
    <updated>2019-10-30T05:34:46.853Z</updated>
    
    <content type="html"><![CDATA[<p>现在一个很热门的博客方式，就是在github上建Github Pages。</p><p>在创建Github的仓库（Resposity），并且上传Hexo页面后，页面总是404。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/1571907461817.png" alt="1571907461817"></p><p>在网上很多教程中，都忽略了一点，就是正确设置github仓库的名字。</p><p><strong>如果要设置Github Pages，仓库的名字，必须是用户名。才能出现形如 <u>username.github.io</u> 的访问方式。</strong></p><p>也就是说，这里的仓库名称也不能随便取得。</p><hr><p>正确设置后，在Github的“Settings”里面，将直接显示出可访问的地址。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/1571907855052.png" alt="1571907855052"></p><p>配置完毕后，形成如下的设置，注意仓库前缀需要和用户名一致。</p><p><img src="http://q068kveb3.bkt.clouddn.com/image/githubname-settings.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在一个很热门的博客方式，就是在github上建Github Pages。&lt;/p&gt;
&lt;p&gt;在创建Github的仓库（Resposity），并且上传Hexo页面后，页面总是404。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://q068kveb3.bkt.clouddn.c
      
    
    </summary>
    
    
      <category term="HTML/CSS/JS" scheme="http://blog.sqj.me/categories/HTML-CSS-JS/"/>
    
    
      <category term="Hexo" scheme="http://blog.sqj.me/tags/Hexo/"/>
    
  </entry>
  
</feed>
